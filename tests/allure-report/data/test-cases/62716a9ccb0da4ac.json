{"uid":"62716a9ccb0da4ac","name":"test_TC36_Demodulator_dropdown_checking","fullName":"tests.test_Qi_Exerciser_checks#test_TC36_Demodulator_dropdown_checking","historyId":"4f1e1f76178a6fb47ae657309df19ef8","time":{"start":1742912125294,"stop":1742912126444,"duration":1150},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" id=\"react-aria1934588517-3\" aria-expanded=\"false\" class=\"dropdowncustom tpt_config_control_dropdown dropdown-toggle btn btn-success\">...</button> is not clickable at point (611, 160). Other element would receive the click: <div id=\"page-wrap-onOpen\">...</div>\n  (Session info: chrome=134.0.6998.165)\nStacktrace:\n\tGetHandleVerifier [0x00007FF78F704C25+3179557]\n\t(No symbol) [0x00007FF78F3688A0]\n\t(No symbol) [0x00007FF78F1F91CA]\n\t(No symbol) [0x00007FF78F257929]\n\t(No symbol) [0x00007FF78F2552E2]\n\t(No symbol) [0x00007FF78F252381]\n\t(No symbol) [0x00007FF78F251281]\n\t(No symbol) [0x00007FF78F242A24]\n\t(No symbol) [0x00007FF78F277C2A]\n\t(No symbol) [0x00007FF78F2422D6]\n\t(No symbol) [0x00007FF78F277E40]\n\t(No symbol) [0x00007FF78F2A02F3]\n\t(No symbol) [0x00007FF78F277A03]\n\t(No symbol) [0x00007FF78F2406D0]\n\t(No symbol) [0x00007FF78F241983]\n\tGetHandleVerifier [0x00007FF78F7667CD+3579853]\n\tGetHandleVerifier [0x00007FF78F77D1D2+3672530]\n\tGetHandleVerifier [0x00007FF78F772153+3627347]\n\tGetHandleVerifier [0x00007FF78F4D092A+868650]\n\t(No symbol) [0x00007FF78F372FFF]\n\t(No symbol) [0x00007FF78F36F4A4]\n\t(No symbol) [0x00007FF78F36F646]\n\t(No symbol) [0x00007FF78F35EAA9]\n\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\n\tRtlUserThreadStart [0x00007FFEE957BF6C+44]","statusTrace":"setup_teardown_qi_exerciser = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"126c439c28ab8e5f83fb451b5f4a01b6\")>, <pages.Qi_Exerciser.QiExerciserPanel object at 0x000001B9B5864C20>)\n\n    def test_TC36_Demodulator_dropdown_checking(setup_teardown_qi_exerciser):\n        driver, QiExerciser = setup_teardown_qi_exerciser\n>       QiExerciser.dropdown_test(QiExerciser.demodulator, \"Demodulator\")\n\ntest_Qi_Exerciser_checks.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\Qi_Exerciser.py:215: in dropdown_test\n    dropdown_element.click()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B9B5D05BE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF78F35EAA9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE957BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" id=\"react-aria1934588517-3\" aria-expanded=\"false\" class=\"dropdowncustom tpt_config_control_dropdown dropdown-toggle btn btn-success\">...</button> is not clickable at point (611, 160). Other element would receive the click: <div id=\"page-wrap-onOpen\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF78F704C25+3179557]\nE       \t(No symbol) [0x00007FF78F3688A0]\nE       \t(No symbol) [0x00007FF78F1F91CA]\nE       \t(No symbol) [0x00007FF78F257929]\nE       \t(No symbol) [0x00007FF78F2552E2]\nE       \t(No symbol) [0x00007FF78F252381]\nE       \t(No symbol) [0x00007FF78F251281]\nE       \t(No symbol) [0x00007FF78F242A24]\nE       \t(No symbol) [0x00007FF78F277C2A]\nE       \t(No symbol) [0x00007FF78F2422D6]\nE       \t(No symbol) [0x00007FF78F277E40]\nE       \t(No symbol) [0x00007FF78F2A02F3]\nE       \t(No symbol) [0x00007FF78F277A03]\nE       \t(No symbol) [0x00007FF78F2406D0]\nE       \t(No symbol) [0x00007FF78F241983]\nE       \tGetHandleVerifier [0x00007FF78F7667CD+3579853]\nE       \tGetHandleVerifier [0x00007FF78F77D1D2+3672530]\nE       \tGetHandleVerifier [0x00007FF78F772153+3627347]\nE       \tGetHandleVerifier [0x00007FF78F4D092A+868650]\nE       \t(No symbol) [0x00007FF78F372FFF]\nE       \t(No symbol) [0x00007FF78F36F4A4]\nE       \t(No symbol) [0x00007FF78F36F646]\nE       \t(No symbol) [0x00007FF78F35EAA9]\nE       \tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFEE957BF6C+44]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_teardown_qi_exerciser","time":{"start":1742912093213,"stop":1742912122192,"duration":28979},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" id=\"react-aria1934588517-3\" aria-expanded=\"false\" class=\"dropdowncustom tpt_config_control_dropdown dropdown-toggle btn btn-success\">...</button> is not clickable at point (611, 160). Other element would receive the click: <div id=\"page-wrap-onOpen\">...</div>\n  (Session info: chrome=134.0.6998.165)\nStacktrace:\n\tGetHandleVerifier [0x00007FF78F704C25+3179557]\n\t(No symbol) [0x00007FF78F3688A0]\n\t(No symbol) [0x00007FF78F1F91CA]\n\t(No symbol) [0x00007FF78F257929]\n\t(No symbol) [0x00007FF78F2552E2]\n\t(No symbol) [0x00007FF78F252381]\n\t(No symbol) [0x00007FF78F251281]\n\t(No symbol) [0x00007FF78F242A24]\n\t(No symbol) [0x00007FF78F277C2A]\n\t(No symbol) [0x00007FF78F2422D6]\n\t(No symbol) [0x00007FF78F277E40]\n\t(No symbol) [0x00007FF78F2A02F3]\n\t(No symbol) [0x00007FF78F277A03]\n\t(No symbol) [0x00007FF78F2406D0]\n\t(No symbol) [0x00007FF78F241983]\n\tGetHandleVerifier [0x00007FF78F7667CD+3579853]\n\tGetHandleVerifier [0x00007FF78F77D1D2+3672530]\n\tGetHandleVerifier [0x00007FF78F772153+3627347]\n\tGetHandleVerifier [0x00007FF78F4D092A+868650]\n\t(No symbol) [0x00007FF78F372FFF]\n\t(No symbol) [0x00007FF78F36F4A4]\n\t(No symbol) [0x00007FF78F36F646]\n\t(No symbol) [0x00007FF78F35EAA9]\n\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\n\tRtlUserThreadStart [0x00007FFEE957BF6C+44]","statusTrace":"setup_teardown_qi_exerciser = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"126c439c28ab8e5f83fb451b5f4a01b6\")>, <pages.Qi_Exerciser.QiExerciserPanel object at 0x000001B9B5864C20>)\n\n    def test_TC36_Demodulator_dropdown_checking(setup_teardown_qi_exerciser):\n        driver, QiExerciser = setup_teardown_qi_exerciser\n>       QiExerciser.dropdown_test(QiExerciser.demodulator, \"Demodulator\")\n\ntest_Qi_Exerciser_checks.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\Qi_Exerciser.py:215: in dropdown_test\n    dropdown_element.click()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B9B5D05BE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF78F35EAA9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE957BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" id=\"react-aria1934588517-3\" aria-expanded=\"false\" class=\"dropdowncustom tpt_config_control_dropdown dropdown-toggle btn btn-success\">...</button> is not clickable at point (611, 160). Other element would receive the click: <div id=\"page-wrap-onOpen\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF78F704C25+3179557]\nE       \t(No symbol) [0x00007FF78F3688A0]\nE       \t(No symbol) [0x00007FF78F1F91CA]\nE       \t(No symbol) [0x00007FF78F257929]\nE       \t(No symbol) [0x00007FF78F2552E2]\nE       \t(No symbol) [0x00007FF78F252381]\nE       \t(No symbol) [0x00007FF78F251281]\nE       \t(No symbol) [0x00007FF78F242A24]\nE       \t(No symbol) [0x00007FF78F277C2A]\nE       \t(No symbol) [0x00007FF78F2422D6]\nE       \t(No symbol) [0x00007FF78F277E40]\nE       \t(No symbol) [0x00007FF78F2A02F3]\nE       \t(No symbol) [0x00007FF78F277A03]\nE       \t(No symbol) [0x00007FF78F2406D0]\nE       \t(No symbol) [0x00007FF78F241983]\nE       \tGetHandleVerifier [0x00007FF78F7667CD+3579853]\nE       \tGetHandleVerifier [0x00007FF78F77D1D2+3672530]\nE       \tGetHandleVerifier [0x00007FF78F772153+3627347]\nE       \tGetHandleVerifier [0x00007FF78F4D092A+868650]\nE       \t(No symbol) [0x00007FF78F372FFF]\nE       \t(No symbol) [0x00007FF78F36F4A4]\nE       \t(No symbol) [0x00007FF78F36F646]\nE       \t(No symbol) [0x00007FF78F35EAA9]\nE       \tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFEE957BF6C+44]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"7eff03d7494237a7","name":"log","source":"7eff03d7494237a7.txt","type":"text/plain","size":174}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"setup_teardown_qi_exerciser::0","time":{"start":1742912126486,"stop":1742912129279,"duration":2793},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_Qi_Exerciser_checks"},{"name":"host","value":"DESKTOP-GHENSD5"},{"name":"thread","value":"35488-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_Qi_Exerciser_checks"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"62716a9ccb0da4ac.json","parameterValues":[]}