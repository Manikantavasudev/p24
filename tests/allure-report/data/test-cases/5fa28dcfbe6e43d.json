{"uid":"5fa28dcfbe6e43d","name":"test_connect_to_tester","fullName":"tests.test_UC1#test_connect_to_tester","historyId":"aaa9b7b476ee8d67704f8e72a130a31d","time":{"start":1742899996083,"stop":1742900054386,"duration":58303},"status":"failed","statusMessage":"AssertionError: Mismatch for Serial Number: Expected 'GRL-C3-MP-2023052', but got 'GRL-C3-MP-2023006'\nassert 'GRL-C3-MP-2023006' == 'GRL-C3-MP-2023052'\n  \n  - GRL-C3-MP-2023052\n  ?                ^^\n  + GRL-C3-MP-2023006\n  ?                ^^","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ea99bf0ac9b8b8b3e9107ef91e4f3208\")>\n\n    @pytest.mark.sanity\n    def test_connect_to_tester(driver):\n        BA_URL = \"http://localhost:2004\"\n        # BA_URL = @pytest.mark.url\n        TESTER_IP = \"192.168.5.79\"\n    \n        logging.info(\"Opening BA URL: %s\", BA_URL)\n        driver.get(BA_URL)\n    \n        wait = WebDriverWait(driver, 10)\n    \n        try:\n            # Clear existing IP address if the clear button exists\n            try:\n                ip_clear = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='rc-select-selection__clear']\")))\n                logging.info(\"Clearing existing IP Address field\")\n                ip_clear.click()\n            except TimeoutException:\n                logging.warning(\"Clear button not found. Skipping clearing IP field.\")\n    \n            # Enter new IP address\n            logging.info(\"Entering new IP Address: %s\", TESTER_IP)\n            ip_input = wait.until(EC.presence_of_element_located((By.XPATH, \"//input[@class='rc-select-search__field']\")))\n            ip_input.send_keys(TESTER_IP)\n            ip_input.send_keys(Keys.RETURN)\n            time.sleep(5)\n    \n            # Click the Connect button\n            logging.info(\"Clicking the Connect button\")\n            connect_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@id='connectionsetup_connect_button']\")))\n            connect_button.click()\n            time.sleep(5)\n    \n            # Verify tester connection status\n            logging.info(\"Verifying tester connection status\")\n            status_element = wait.until(EC.presence_of_element_located((By.XPATH, \"//td[contains(@class, 'tester-info-border')]/div[@class='right-spacing-tester']/b\")))\n            tester_status = status_element.text.strip()\n            logging.info(\"Tester connection status: %s\", tester_status)\n            assert \"Connected\" in tester_status, \"Tester did not connect successfully!\"\n    \n        except Exception as e:\n            logging.error(f\"Error during connection setup: {e}\")\n            driver.save_screenshot(\"failure_screenshot.png\")  # Capture screenshot for debugging\n            pytest.fail(f\"Test failed due to error: {e}\")\n    \n        # Expected details\n        EXPECTED_DETAILS = {\n            \"Tester Status\": \"Connected\",\n            \"Serial Number\": \"GRL-C3-MP-2023052\",\n            \"Firmware Version\": \"5.0.1.31 / 1.8\",\n            \"Next Calibration Date\": \"03 July 2025\",\n            \"Tester IP Address\": \"192.168.5.79\",\n            \"Port\": \"5002\"\n        }\n    \n        # Extract details from the table\n        extracted_details = {}\n        for key in EXPECTED_DETAILS.keys():\n            try:\n                key_element = wait.until(EC.presence_of_element_located((By.XPATH, f\"//td[contains(text(), '{key}')]\")))\n                value_element = key_element.find_element(By.XPATH, \"./following-sibling::td//b\")\n                extracted_details[key] = value_element.text.strip()\n                logging.info(f\"Extracted {key}: {extracted_details[key]}\")\n            except (NoSuchElementException, TimeoutException) as e:\n                logging.error(f\"Error extracting {key}: {e}\")\n                extracted_details[key] = None\n    \n        # Log extracted details\n        logging.info(\"Extracted details: %s\", extracted_details)\n    \n        # Verify extracted details against expected details\n        for key, expected_value in EXPECTED_DETAILS.items():\n>           assert extracted_details[key] == expected_value, f\"Mismatch for {key}: Expected '{expected_value}', but got '{extracted_details[key]}'\"\nE           AssertionError: Mismatch for Serial Number: Expected 'GRL-C3-MP-2023052', but got 'GRL-C3-MP-2023006'\nE           assert 'GRL-C3-MP-2023006' == 'GRL-C3-MP-2023052'\nE             \nE             - GRL-C3-MP-2023052\nE             ?                ^^\nE             + GRL-C3-MP-2023006\nE             ?                ^^\n\ntest_UC1.py:124: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1742899985809,"stop":1742899996081,"duration":10272},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Mismatch for Serial Number: Expected 'GRL-C3-MP-2023052', but got 'GRL-C3-MP-2023006'\nassert 'GRL-C3-MP-2023006' == 'GRL-C3-MP-2023052'\n  \n  - GRL-C3-MP-2023052\n  ?                ^^\n  + GRL-C3-MP-2023006\n  ?                ^^","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ea99bf0ac9b8b8b3e9107ef91e4f3208\")>\n\n    @pytest.mark.sanity\n    def test_connect_to_tester(driver):\n        BA_URL = \"http://localhost:2004\"\n        # BA_URL = @pytest.mark.url\n        TESTER_IP = \"192.168.5.79\"\n    \n        logging.info(\"Opening BA URL: %s\", BA_URL)\n        driver.get(BA_URL)\n    \n        wait = WebDriverWait(driver, 10)\n    \n        try:\n            # Clear existing IP address if the clear button exists\n            try:\n                ip_clear = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='rc-select-selection__clear']\")))\n                logging.info(\"Clearing existing IP Address field\")\n                ip_clear.click()\n            except TimeoutException:\n                logging.warning(\"Clear button not found. Skipping clearing IP field.\")\n    \n            # Enter new IP address\n            logging.info(\"Entering new IP Address: %s\", TESTER_IP)\n            ip_input = wait.until(EC.presence_of_element_located((By.XPATH, \"//input[@class='rc-select-search__field']\")))\n            ip_input.send_keys(TESTER_IP)\n            ip_input.send_keys(Keys.RETURN)\n            time.sleep(5)\n    \n            # Click the Connect button\n            logging.info(\"Clicking the Connect button\")\n            connect_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@id='connectionsetup_connect_button']\")))\n            connect_button.click()\n            time.sleep(5)\n    \n            # Verify tester connection status\n            logging.info(\"Verifying tester connection status\")\n            status_element = wait.until(EC.presence_of_element_located((By.XPATH, \"//td[contains(@class, 'tester-info-border')]/div[@class='right-spacing-tester']/b\")))\n            tester_status = status_element.text.strip()\n            logging.info(\"Tester connection status: %s\", tester_status)\n            assert \"Connected\" in tester_status, \"Tester did not connect successfully!\"\n    \n        except Exception as e:\n            logging.error(f\"Error during connection setup: {e}\")\n            driver.save_screenshot(\"failure_screenshot.png\")  # Capture screenshot for debugging\n            pytest.fail(f\"Test failed due to error: {e}\")\n    \n        # Expected details\n        EXPECTED_DETAILS = {\n            \"Tester Status\": \"Connected\",\n            \"Serial Number\": \"GRL-C3-MP-2023052\",\n            \"Firmware Version\": \"5.0.1.31 / 1.8\",\n            \"Next Calibration Date\": \"03 July 2025\",\n            \"Tester IP Address\": \"192.168.5.79\",\n            \"Port\": \"5002\"\n        }\n    \n        # Extract details from the table\n        extracted_details = {}\n        for key in EXPECTED_DETAILS.keys():\n            try:\n                key_element = wait.until(EC.presence_of_element_located((By.XPATH, f\"//td[contains(text(), '{key}')]\")))\n                value_element = key_element.find_element(By.XPATH, \"./following-sibling::td//b\")\n                extracted_details[key] = value_element.text.strip()\n                logging.info(f\"Extracted {key}: {extracted_details[key]}\")\n            except (NoSuchElementException, TimeoutException) as e:\n                logging.error(f\"Error extracting {key}: {e}\")\n                extracted_details[key] = None\n    \n        # Log extracted details\n        logging.info(\"Extracted details: %s\", extracted_details)\n    \n        # Verify extracted details against expected details\n        for key, expected_value in EXPECTED_DETAILS.items():\n>           assert extracted_details[key] == expected_value, f\"Mismatch for {key}: Expected '{expected_value}', but got '{extracted_details[key]}'\"\nE           AssertionError: Mismatch for Serial Number: Expected 'GRL-C3-MP-2023052', but got 'GRL-C3-MP-2023006'\nE           assert 'GRL-C3-MP-2023006' == 'GRL-C3-MP-2023052'\nE             \nE             - GRL-C3-MP-2023052\nE             ?                ^^\nE             + GRL-C3-MP-2023006\nE             ?                ^^\n\ntest_UC1.py:124: AssertionError","steps":[],"attachments":[{"uid":"dda963e503d7226c","name":"log","source":"dda963e503d7226c.txt","type":"text/plain","size":1281}],"parameters":[],"stepsCount":0,"attachmentStep":false,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1742900059369,"stop":1742900071389,"duration":12020},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"sanity"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_UC1"},{"name":"host","value":"DESKTOP-GHENSD5"},{"name":"thread","value":"4220-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_UC1"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["sanity"]},"source":"5fa28dcfbe6e43d.json","parameterValues":[]}