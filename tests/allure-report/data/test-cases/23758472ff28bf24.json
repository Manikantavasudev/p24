{"uid":"23758472ff28bf24","name":"test_connect_to_tester","fullName":"tests.test_UC1#test_connect_to_tester","historyId":"aaa9b7b476ee8d67704f8e72a130a31d","time":{"start":1742550788288,"stop":1742550800140,"duration":11852},"status":"failed","statusMessage":"Failed: Test failed due to error: Message: element click intercepted: Element <button type=\"button\" id=\"connectionsetup_connect_button\" class=\"grl-connect-button grl-button connectionsetup-leftsideSetWidth btn btn-primary\">...</button> is not clickable at point (416, 210). Other element would receive the click: <body style=\"overflow-x: hidden; cursor: wait;\">...</body>\n  (Session info: chrome=134.0.6998.90)\nStacktrace:\n\tGetHandleVerifier [0x00007FF72DD8FE65+26629]\n\t(No symbol) [0x00007FF72DCF6030]\n\t(No symbol) [0x00007FF72DB8931A]\n\t(No symbol) [0x00007FF72DBE77A9]\n\t(No symbol) [0x00007FF72DBE5162]\n\t(No symbol) [0x00007FF72DBE2201]\n\t(No symbol) [0x00007FF72DBE1108]\n\t(No symbol) [0x00007FF72DBD28A4]\n\t(No symbol) [0x00007FF72DC07AAA]\n\t(No symbol) [0x00007FF72DBD2156]\n\t(No symbol) [0x00007FF72DC07CC0]\n\t(No symbol) [0x00007FF72DC30169]\n\t(No symbol) [0x00007FF72DC07883]\n\t(No symbol) [0x00007FF72DBD0550]\n\t(No symbol) [0x00007FF72DBD1803]\n\tGetHandleVerifier [0x00007FF72E0E72DD+3529853]\n\tGetHandleVerifier [0x00007FF72E0FDA42+3621858]\n\tGetHandleVerifier [0x00007FF72E0F24F3+3575443]\n\tGetHandleVerifier [0x00007FF72DE5B79A+860474]\n\t(No symbol) [0x00007FF72DD008AF]\n\t(No symbol) [0x00007FF72DCFCBE4]\n\t(No symbol) [0x00007FF72DCFCD86]\n\t(No symbol) [0x00007FF72DCEC2E9]\n\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\n\tRtlUserThreadStart [0x00007FFEE957BF6C+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7252cb15d97d899414388db19c7f2b36\")>\n\n    @pytest.mark.sanity\n    def test_connect_to_tester(driver):\n        BA_URL = \"http://localhost:2004\"\n        TESTER_IP = \"192.168.5.63\"\n    \n        logging.info(\"Opening BA URL: %s\", BA_URL)\n        driver.get(BA_URL)\n    \n        wait = WebDriverWait(driver, 10)\n    \n        try:\n            # Clear existing IP address if the clear button exists\n            try:\n                ip_clear = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='rc-select-selection__clear']\")))\n                logging.info(\"Clearing existing IP Address field\")\n                ip_clear.click()\n            except TimeoutException:\n                logging.warning(\"Clear button not found. Skipping clearing IP field.\")\n    \n            # Enter new IP address\n            logging.info(\"Entering new IP Address: %s\", TESTER_IP)\n            ip_input = wait.until(EC.presence_of_element_located((By.XPATH, \"//input[@class='rc-select-search__field']\")))\n            ip_input.send_keys(TESTER_IP)\n            ip_input.send_keys(Keys.RETURN)\n            time.sleep(5)\n    \n            # Click the Connect button\n            logging.info(\"Clicking the Connect button\")\n            connect_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@id='connectionsetup_connect_button']\")))\n>           connect_button.click()\n\ntest_UC1.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D889B75590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF72DCEC2E9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE957BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" id=\"connectionsetup_connect_button\" class=\"grl-connect-button grl-button connectionsetup-leftsideSetWidth btn btn-primary\">...</button> is not clickable at point (416, 210). Other element would receive the click: <body style=\"overflow-x: hidden; cursor: wait;\">...</body>\nE         (Session info: chrome=134.0.6998.90)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF72DD8FE65+26629]\nE       \t(No symbol) [0x00007FF72DCF6030]\nE       \t(No symbol) [0x00007FF72DB8931A]\nE       \t(No symbol) [0x00007FF72DBE77A9]\nE       \t(No symbol) [0x00007FF72DBE5162]\nE       \t(No symbol) [0x00007FF72DBE2201]\nE       \t(No symbol) [0x00007FF72DBE1108]\nE       \t(No symbol) [0x00007FF72DBD28A4]\nE       \t(No symbol) [0x00007FF72DC07AAA]\nE       \t(No symbol) [0x00007FF72DBD2156]\nE       \t(No symbol) [0x00007FF72DC07CC0]\nE       \t(No symbol) [0x00007FF72DC30169]\nE       \t(No symbol) [0x00007FF72DC07883]\nE       \t(No symbol) [0x00007FF72DBD0550]\nE       \t(No symbol) [0x00007FF72DBD1803]\nE       \tGetHandleVerifier [0x00007FF72E0E72DD+3529853]\nE       \tGetHandleVerifier [0x00007FF72E0FDA42+3621858]\nE       \tGetHandleVerifier [0x00007FF72E0F24F3+3575443]\nE       \tGetHandleVerifier [0x00007FF72DE5B79A+860474]\nE       \t(No symbol) [0x00007FF72DD008AF]\nE       \t(No symbol) [0x00007FF72DCFCBE4]\nE       \t(No symbol) [0x00007FF72DCFCD86]\nE       \t(No symbol) [0x00007FF72DCEC2E9]\nE       \tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFEE957BF6C+44]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7252cb15d97d899414388db19c7f2b36\")>\n\n    @pytest.mark.sanity\n    def test_connect_to_tester(driver):\n        BA_URL = \"http://localhost:2004\"\n        TESTER_IP = \"192.168.5.63\"\n    \n        logging.info(\"Opening BA URL: %s\", BA_URL)\n        driver.get(BA_URL)\n    \n        wait = WebDriverWait(driver, 10)\n    \n        try:\n            # Clear existing IP address if the clear button exists\n            try:\n                ip_clear = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='rc-select-selection__clear']\")))\n                logging.info(\"Clearing existing IP Address field\")\n                ip_clear.click()\n            except TimeoutException:\n                logging.warning(\"Clear button not found. Skipping clearing IP field.\")\n    \n            # Enter new IP address\n            logging.info(\"Entering new IP Address: %s\", TESTER_IP)\n            ip_input = wait.until(EC.presence_of_element_located((By.XPATH, \"//input[@class='rc-select-search__field']\")))\n            ip_input.send_keys(TESTER_IP)\n            ip_input.send_keys(Keys.RETURN)\n            time.sleep(5)\n    \n            # Click the Connect button\n            logging.info(\"Clicking the Connect button\")\n            connect_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@id='connectionsetup_connect_button']\")))\n            connect_button.click()\n            time.sleep(5)\n    \n            # Verify tester connection status\n            logging.info(\"Verifying tester connection status\")\n            status_element = wait.until(EC.presence_of_element_located((By.XPATH, \"//td[contains(@class, 'tester-info-border')]/div[@class='right-spacing-tester']/b\")))\n            tester_status = status_element.text.strip()\n            logging.info(\"Tester connection status: %s\", tester_status)\n            assert \"Connected\" in tester_status, \"Tester did not connect successfully!\"\n    \n        except Exception as e:\n            logging.error(f\"Error during connection setup: {e}\")\n            driver.save_screenshot(\"failure_screenshot.png\")  # Capture screenshot for debugging\n>           pytest.fail(f\"Test failed due to error: {e}\")\nE           Failed: Test failed due to error: Message: element click intercepted: Element <button type=\"button\" id=\"connectionsetup_connect_button\" class=\"grl-connect-button grl-button connectionsetup-leftsideSetWidth btn btn-primary\">...</button> is not clickable at point (416, 210). Other element would receive the click: <body style=\"overflow-x: hidden; cursor: wait;\">...</body>\nE             (Session info: chrome=134.0.6998.90)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF72DD8FE65+26629]\nE           \t(No symbol) [0x00007FF72DCF6030]\nE           \t(No symbol) [0x00007FF72DB8931A]\nE           \t(No symbol) [0x00007FF72DBE77A9]\nE           \t(No symbol) [0x00007FF72DBE5162]\nE           \t(No symbol) [0x00007FF72DBE2201]\nE           \t(No symbol) [0x00007FF72DBE1108]\nE           \t(No symbol) [0x00007FF72DBD28A4]\nE           \t(No symbol) [0x00007FF72DC07AAA]\nE           \t(No symbol) [0x00007FF72DBD2156]\nE           \t(No symbol) [0x00007FF72DC07CC0]\nE           \t(No symbol) [0x00007FF72DC30169]\nE           \t(No symbol) [0x00007FF72DC07883]\nE           \t(No symbol) [0x00007FF72DBD0550]\nE           \t(No symbol) [0x00007FF72DBD1803]\nE           \tGetHandleVerifier [0x00007FF72E0E72DD+3529853]\nE           \tGetHandleVerifier [0x00007FF72E0FDA42+3621858]\nE           \tGetHandleVerifier [0x00007FF72E0F24F3+3575443]\nE           \tGetHandleVerifier [0x00007FF72DE5B79A+860474]\nE           \t(No symbol) [0x00007FF72DD008AF]\nE           \t(No symbol) [0x00007FF72DCFCBE4]\nE           \t(No symbol) [0x00007FF72DCFCD86]\nE           \t(No symbol) [0x00007FF72DCEC2E9]\nE           \tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\nE           \tRtlUserThreadStart [0x00007FFEE957BF6C+44]\n\ntest_UC1.py:69: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1742550785739,"stop":1742550788287,"duration":2548},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"Failed: Test failed due to error: Message: element click intercepted: Element <button type=\"button\" id=\"connectionsetup_connect_button\" class=\"grl-connect-button grl-button connectionsetup-leftsideSetWidth btn btn-primary\">...</button> is not clickable at point (416, 210). Other element would receive the click: <body style=\"overflow-x: hidden; cursor: wait;\">...</body>\n  (Session info: chrome=134.0.6998.90)\nStacktrace:\n\tGetHandleVerifier [0x00007FF72DD8FE65+26629]\n\t(No symbol) [0x00007FF72DCF6030]\n\t(No symbol) [0x00007FF72DB8931A]\n\t(No symbol) [0x00007FF72DBE77A9]\n\t(No symbol) [0x00007FF72DBE5162]\n\t(No symbol) [0x00007FF72DBE2201]\n\t(No symbol) [0x00007FF72DBE1108]\n\t(No symbol) [0x00007FF72DBD28A4]\n\t(No symbol) [0x00007FF72DC07AAA]\n\t(No symbol) [0x00007FF72DBD2156]\n\t(No symbol) [0x00007FF72DC07CC0]\n\t(No symbol) [0x00007FF72DC30169]\n\t(No symbol) [0x00007FF72DC07883]\n\t(No symbol) [0x00007FF72DBD0550]\n\t(No symbol) [0x00007FF72DBD1803]\n\tGetHandleVerifier [0x00007FF72E0E72DD+3529853]\n\tGetHandleVerifier [0x00007FF72E0FDA42+3621858]\n\tGetHandleVerifier [0x00007FF72E0F24F3+3575443]\n\tGetHandleVerifier [0x00007FF72DE5B79A+860474]\n\t(No symbol) [0x00007FF72DD008AF]\n\t(No symbol) [0x00007FF72DCFCBE4]\n\t(No symbol) [0x00007FF72DCFCD86]\n\t(No symbol) [0x00007FF72DCEC2E9]\n\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\n\tRtlUserThreadStart [0x00007FFEE957BF6C+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7252cb15d97d899414388db19c7f2b36\")>\n\n    @pytest.mark.sanity\n    def test_connect_to_tester(driver):\n        BA_URL = \"http://localhost:2004\"\n        TESTER_IP = \"192.168.5.63\"\n    \n        logging.info(\"Opening BA URL: %s\", BA_URL)\n        driver.get(BA_URL)\n    \n        wait = WebDriverWait(driver, 10)\n    \n        try:\n            # Clear existing IP address if the clear button exists\n            try:\n                ip_clear = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='rc-select-selection__clear']\")))\n                logging.info(\"Clearing existing IP Address field\")\n                ip_clear.click()\n            except TimeoutException:\n                logging.warning(\"Clear button not found. Skipping clearing IP field.\")\n    \n            # Enter new IP address\n            logging.info(\"Entering new IP Address: %s\", TESTER_IP)\n            ip_input = wait.until(EC.presence_of_element_located((By.XPATH, \"//input[@class='rc-select-search__field']\")))\n            ip_input.send_keys(TESTER_IP)\n            ip_input.send_keys(Keys.RETURN)\n            time.sleep(5)\n    \n            # Click the Connect button\n            logging.info(\"Clicking the Connect button\")\n            connect_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@id='connectionsetup_connect_button']\")))\n>           connect_button.click()\n\ntest_UC1.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D889B75590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF72DCEC2E9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE957BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" id=\"connectionsetup_connect_button\" class=\"grl-connect-button grl-button connectionsetup-leftsideSetWidth btn btn-primary\">...</button> is not clickable at point (416, 210). Other element would receive the click: <body style=\"overflow-x: hidden; cursor: wait;\">...</body>\nE         (Session info: chrome=134.0.6998.90)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF72DD8FE65+26629]\nE       \t(No symbol) [0x00007FF72DCF6030]\nE       \t(No symbol) [0x00007FF72DB8931A]\nE       \t(No symbol) [0x00007FF72DBE77A9]\nE       \t(No symbol) [0x00007FF72DBE5162]\nE       \t(No symbol) [0x00007FF72DBE2201]\nE       \t(No symbol) [0x00007FF72DBE1108]\nE       \t(No symbol) [0x00007FF72DBD28A4]\nE       \t(No symbol) [0x00007FF72DC07AAA]\nE       \t(No symbol) [0x00007FF72DBD2156]\nE       \t(No symbol) [0x00007FF72DC07CC0]\nE       \t(No symbol) [0x00007FF72DC30169]\nE       \t(No symbol) [0x00007FF72DC07883]\nE       \t(No symbol) [0x00007FF72DBD0550]\nE       \t(No symbol) [0x00007FF72DBD1803]\nE       \tGetHandleVerifier [0x00007FF72E0E72DD+3529853]\nE       \tGetHandleVerifier [0x00007FF72E0FDA42+3621858]\nE       \tGetHandleVerifier [0x00007FF72E0F24F3+3575443]\nE       \tGetHandleVerifier [0x00007FF72DE5B79A+860474]\nE       \t(No symbol) [0x00007FF72DD008AF]\nE       \t(No symbol) [0x00007FF72DCFCBE4]\nE       \t(No symbol) [0x00007FF72DCFCD86]\nE       \t(No symbol) [0x00007FF72DCEC2E9]\nE       \tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFEE957BF6C+44]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7252cb15d97d899414388db19c7f2b36\")>\n\n    @pytest.mark.sanity\n    def test_connect_to_tester(driver):\n        BA_URL = \"http://localhost:2004\"\n        TESTER_IP = \"192.168.5.63\"\n    \n        logging.info(\"Opening BA URL: %s\", BA_URL)\n        driver.get(BA_URL)\n    \n        wait = WebDriverWait(driver, 10)\n    \n        try:\n            # Clear existing IP address if the clear button exists\n            try:\n                ip_clear = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='rc-select-selection__clear']\")))\n                logging.info(\"Clearing existing IP Address field\")\n                ip_clear.click()\n            except TimeoutException:\n                logging.warning(\"Clear button not found. Skipping clearing IP field.\")\n    \n            # Enter new IP address\n            logging.info(\"Entering new IP Address: %s\", TESTER_IP)\n            ip_input = wait.until(EC.presence_of_element_located((By.XPATH, \"//input[@class='rc-select-search__field']\")))\n            ip_input.send_keys(TESTER_IP)\n            ip_input.send_keys(Keys.RETURN)\n            time.sleep(5)\n    \n            # Click the Connect button\n            logging.info(\"Clicking the Connect button\")\n            connect_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@id='connectionsetup_connect_button']\")))\n            connect_button.click()\n            time.sleep(5)\n    \n            # Verify tester connection status\n            logging.info(\"Verifying tester connection status\")\n            status_element = wait.until(EC.presence_of_element_located((By.XPATH, \"//td[contains(@class, 'tester-info-border')]/div[@class='right-spacing-tester']/b\")))\n            tester_status = status_element.text.strip()\n            logging.info(\"Tester connection status: %s\", tester_status)\n            assert \"Connected\" in tester_status, \"Tester did not connect successfully!\"\n    \n        except Exception as e:\n            logging.error(f\"Error during connection setup: {e}\")\n            driver.save_screenshot(\"failure_screenshot.png\")  # Capture screenshot for debugging\n>           pytest.fail(f\"Test failed due to error: {e}\")\nE           Failed: Test failed due to error: Message: element click intercepted: Element <button type=\"button\" id=\"connectionsetup_connect_button\" class=\"grl-connect-button grl-button connectionsetup-leftsideSetWidth btn btn-primary\">...</button> is not clickable at point (416, 210). Other element would receive the click: <body style=\"overflow-x: hidden; cursor: wait;\">...</body>\nE             (Session info: chrome=134.0.6998.90)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF72DD8FE65+26629]\nE           \t(No symbol) [0x00007FF72DCF6030]\nE           \t(No symbol) [0x00007FF72DB8931A]\nE           \t(No symbol) [0x00007FF72DBE77A9]\nE           \t(No symbol) [0x00007FF72DBE5162]\nE           \t(No symbol) [0x00007FF72DBE2201]\nE           \t(No symbol) [0x00007FF72DBE1108]\nE           \t(No symbol) [0x00007FF72DBD28A4]\nE           \t(No symbol) [0x00007FF72DC07AAA]\nE           \t(No symbol) [0x00007FF72DBD2156]\nE           \t(No symbol) [0x00007FF72DC07CC0]\nE           \t(No symbol) [0x00007FF72DC30169]\nE           \t(No symbol) [0x00007FF72DC07883]\nE           \t(No symbol) [0x00007FF72DBD0550]\nE           \t(No symbol) [0x00007FF72DBD1803]\nE           \tGetHandleVerifier [0x00007FF72E0E72DD+3529853]\nE           \tGetHandleVerifier [0x00007FF72E0FDA42+3621858]\nE           \tGetHandleVerifier [0x00007FF72E0F24F3+3575443]\nE           \tGetHandleVerifier [0x00007FF72DE5B79A+860474]\nE           \t(No symbol) [0x00007FF72DD008AF]\nE           \t(No symbol) [0x00007FF72DCFCBE4]\nE           \t(No symbol) [0x00007FF72DCFCD86]\nE           \t(No symbol) [0x00007FF72DCEC2E9]\nE           \tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\nE           \tRtlUserThreadStart [0x00007FFEE957BF6C+44]\n\ntest_UC1.py:69: Failed","steps":[],"attachments":[{"uid":"61b8900a2a1f6669","name":"log","source":"61b8900a2a1f6669.txt","type":"text/plain","size":1695}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"driver::0","time":{"start":1742550805850,"stop":1742550808463,"duration":2613},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"sanity"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_UC1"},{"name":"host","value":"DESKTOP-GHENSD5"},{"name":"thread","value":"36496-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_UC1"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["sanity"]},"source":"23758472ff28bf24.json","parameterValues":[]}