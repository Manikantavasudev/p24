{"uid":"c89593d70ce259bd","name":"test_TC30_A0_inputbox_checking","fullName":"tests.test_Qi_Exerciser_checks#test_TC30_A0_inputbox_checking","historyId":"169eea59231fee3311cc3d102004730b","time":{"start":1742729265188,"stop":1742729265308,"duration":120},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidElementStateException: Message: invalid element state: Element is not currently interactable and may not be manipulated\n  (Session info: chrome=134.0.6998.165)\nStacktrace:\n\tGetHandleVerifier [0x00007FF63A924C25+3179557]\n\t(No symbol) [0x00007FF63A5888A0]\n\t(No symbol) [0x00007FF63A4191CA]\n\t(No symbol) [0x00007FF63A420B98]\n\t(No symbol) [0x00007FF63A423BCC]\n\t(No symbol) [0x00007FF63A423C9F]\n\t(No symbol) [0x00007FF63A46588A]\n\t(No symbol) [0x00007FF63A497C2A]\n\t(No symbol) [0x00007FF63A4622D6]\n\t(No symbol) [0x00007FF63A497E40]\n\t(No symbol) [0x00007FF63A4C02F3]\n\t(No symbol) [0x00007FF63A497A03]\n\t(No symbol) [0x00007FF63A4606D0]\n\t(No symbol) [0x00007FF63A461983]\n\tGetHandleVerifier [0x00007FF63A9867CD+3579853]\n\tGetHandleVerifier [0x00007FF63A99D1D2+3672530]\n\tGetHandleVerifier [0x00007FF63A992153+3627347]\n\tGetHandleVerifier [0x00007FF63A6F092A+868650]\n\t(No symbol) [0x00007FF63A592FFF]\n\t(No symbol) [0x00007FF63A58F4A4]\n\t(No symbol) [0x00007FF63A58F646]\n\t(No symbol) [0x00007FF63A57EAA9]\n\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\n\tRtlUserThreadStart [0x00007FFEE957BF6C+44]","statusTrace":"setup_teardown_qi_exerciser = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9ecf0e6206c052148dd5cdb4f0e56582\")>, <pages.Qi_Exerciser.QiExerciserPanel object at 0x0000013D28A64C20>)\n\n    def test_TC30_A0_inputbox_checking(setup_teardown_qi_exerciser):\n        driver, QiExerciser = setup_teardown_qi_exerciser\n>       QiExerciser.input_field_test(QiExerciser.a0_inputbox, \"A0\")\n\ntest_Qi_Exerciser_checks.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\Qi_Exerciser.py:128: in input_field_test\n    input_field.clear()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:117: in clear\n    self._execute(Command.CLEAR_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000013D28DB8EC0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"invalid element state: Element is not c...07FF63A57EAA9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE957BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: invalid element state: Element is not currently interactable and may not be manipulated\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF63A924C25+3179557]\nE       \t(No symbol) [0x00007FF63A5888A0]\nE       \t(No symbol) [0x00007FF63A4191CA]\nE       \t(No symbol) [0x00007FF63A420B98]\nE       \t(No symbol) [0x00007FF63A423BCC]\nE       \t(No symbol) [0x00007FF63A423C9F]\nE       \t(No symbol) [0x00007FF63A46588A]\nE       \t(No symbol) [0x00007FF63A497C2A]\nE       \t(No symbol) [0x00007FF63A4622D6]\nE       \t(No symbol) [0x00007FF63A497E40]\nE       \t(No symbol) [0x00007FF63A4C02F3]\nE       \t(No symbol) [0x00007FF63A497A03]\nE       \t(No symbol) [0x00007FF63A4606D0]\nE       \t(No symbol) [0x00007FF63A461983]\nE       \tGetHandleVerifier [0x00007FF63A9867CD+3579853]\nE       \tGetHandleVerifier [0x00007FF63A99D1D2+3672530]\nE       \tGetHandleVerifier [0x00007FF63A992153+3627347]\nE       \tGetHandleVerifier [0x00007FF63A6F092A+868650]\nE       \t(No symbol) [0x00007FF63A592FFF]\nE       \t(No symbol) [0x00007FF63A58F4A4]\nE       \t(No symbol) [0x00007FF63A58F646]\nE       \t(No symbol) [0x00007FF63A57EAA9]\nE       \tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFEE957BF6C+44]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidElementStateException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_teardown_qi_exerciser","time":{"start":1742729200882,"stop":1742729265146,"duration":64264},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidElementStateException: Message: invalid element state: Element is not currently interactable and may not be manipulated\n  (Session info: chrome=134.0.6998.165)\nStacktrace:\n\tGetHandleVerifier [0x00007FF63A924C25+3179557]\n\t(No symbol) [0x00007FF63A5888A0]\n\t(No symbol) [0x00007FF63A4191CA]\n\t(No symbol) [0x00007FF63A420B98]\n\t(No symbol) [0x00007FF63A423BCC]\n\t(No symbol) [0x00007FF63A423C9F]\n\t(No symbol) [0x00007FF63A46588A]\n\t(No symbol) [0x00007FF63A497C2A]\n\t(No symbol) [0x00007FF63A4622D6]\n\t(No symbol) [0x00007FF63A497E40]\n\t(No symbol) [0x00007FF63A4C02F3]\n\t(No symbol) [0x00007FF63A497A03]\n\t(No symbol) [0x00007FF63A4606D0]\n\t(No symbol) [0x00007FF63A461983]\n\tGetHandleVerifier [0x00007FF63A9867CD+3579853]\n\tGetHandleVerifier [0x00007FF63A99D1D2+3672530]\n\tGetHandleVerifier [0x00007FF63A992153+3627347]\n\tGetHandleVerifier [0x00007FF63A6F092A+868650]\n\t(No symbol) [0x00007FF63A592FFF]\n\t(No symbol) [0x00007FF63A58F4A4]\n\t(No symbol) [0x00007FF63A58F646]\n\t(No symbol) [0x00007FF63A57EAA9]\n\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\n\tRtlUserThreadStart [0x00007FFEE957BF6C+44]","statusTrace":"setup_teardown_qi_exerciser = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"9ecf0e6206c052148dd5cdb4f0e56582\")>, <pages.Qi_Exerciser.QiExerciserPanel object at 0x0000013D28A64C20>)\n\n    def test_TC30_A0_inputbox_checking(setup_teardown_qi_exerciser):\n        driver, QiExerciser = setup_teardown_qi_exerciser\n>       QiExerciser.input_field_test(QiExerciser.a0_inputbox, \"A0\")\n\ntest_Qi_Exerciser_checks.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\Qi_Exerciser.py:128: in input_field_test\n    input_field.clear()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:117: in clear\n    self._execute(Command.CLEAR_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000013D28DB8EC0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"invalid element state: Element is not c...07FF63A57EAA9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE957BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: invalid element state: Element is not currently interactable and may not be manipulated\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF63A924C25+3179557]\nE       \t(No symbol) [0x00007FF63A5888A0]\nE       \t(No symbol) [0x00007FF63A4191CA]\nE       \t(No symbol) [0x00007FF63A420B98]\nE       \t(No symbol) [0x00007FF63A423BCC]\nE       \t(No symbol) [0x00007FF63A423C9F]\nE       \t(No symbol) [0x00007FF63A46588A]\nE       \t(No symbol) [0x00007FF63A497C2A]\nE       \t(No symbol) [0x00007FF63A4622D6]\nE       \t(No symbol) [0x00007FF63A497E40]\nE       \t(No symbol) [0x00007FF63A4C02F3]\nE       \t(No symbol) [0x00007FF63A497A03]\nE       \t(No symbol) [0x00007FF63A4606D0]\nE       \t(No symbol) [0x00007FF63A461983]\nE       \tGetHandleVerifier [0x00007FF63A9867CD+3579853]\nE       \tGetHandleVerifier [0x00007FF63A99D1D2+3672530]\nE       \tGetHandleVerifier [0x00007FF63A992153+3627347]\nE       \tGetHandleVerifier [0x00007FF63A6F092A+868650]\nE       \t(No symbol) [0x00007FF63A592FFF]\nE       \t(No symbol) [0x00007FF63A58F4A4]\nE       \t(No symbol) [0x00007FF63A58F646]\nE       \t(No symbol) [0x00007FF63A57EAA9]\nE       \tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFEE957BF6C+44]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidElementStateException","steps":[],"attachments":[{"uid":"9dea7ea0022e18f1","name":"log","source":"9dea7ea0022e18f1.txt","type":"text/plain","size":327}],"parameters":[],"stepsCount":0,"attachmentStep":false,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup_teardown_qi_exerciser::0","time":{"start":1742729270459,"stop":1742729273064,"duration":2605},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_Qi_Exerciser_checks"},{"name":"host","value":"DESKTOP-GHENSD5"},{"name":"thread","value":"28784-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_Qi_Exerciser_checks"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"c89593d70ce259bd.json","parameterValues":[]}