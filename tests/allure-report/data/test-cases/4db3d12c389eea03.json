{"uid":"4db3d12c389eea03","name":"test_SDF_jsonval","fullName":"tests.test_UC1#test_SDF_jsonval","historyId":"0fc7fda4214af49b00a23862035574fa","time":{"start":1742550804593,"stop":1742550805803,"duration":1210},"status":"failed","statusMessage":"Failed: Test failed due to error: Message: element click intercepted: Element <span class=\"leftnavbar-title\">...</span> is not clickable at point (74, 247). Other element would receive the click: <div class=\"modal-backdrop\"></div>\n  (Session info: chrome=134.0.6998.90)\nStacktrace:\n\tGetHandleVerifier [0x00007FF72DD8FE65+26629]\n\t(No symbol) [0x00007FF72DCF6030]\n\t(No symbol) [0x00007FF72DB8931A]\n\t(No symbol) [0x00007FF72DBE77A9]\n\t(No symbol) [0x00007FF72DBE5162]\n\t(No symbol) [0x00007FF72DBE2201]\n\t(No symbol) [0x00007FF72DBE1108]\n\t(No symbol) [0x00007FF72DBD28A4]\n\t(No symbol) [0x00007FF72DC07AAA]\n\t(No symbol) [0x00007FF72DBD2156]\n\t(No symbol) [0x00007FF72DC07CC0]\n\t(No symbol) [0x00007FF72DC30169]\n\t(No symbol) [0x00007FF72DC07883]\n\t(No symbol) [0x00007FF72DBD0550]\n\t(No symbol) [0x00007FF72DBD1803]\n\tGetHandleVerifier [0x00007FF72E0E72DD+3529853]\n\tGetHandleVerifier [0x00007FF72E0FDA42+3621858]\n\tGetHandleVerifier [0x00007FF72E0F24F3+3575443]\n\tGetHandleVerifier [0x00007FF72DE5B79A+860474]\n\t(No symbol) [0x00007FF72DD008AF]\n\t(No symbol) [0x00007FF72DCFCBE4]\n\t(No symbol) [0x00007FF72DCFCD86]\n\t(No symbol) [0x00007FF72DCEC2E9]\n\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\n\tRtlUserThreadStart [0x00007FFEE957BF6C+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7252cb15d97d899414388db19c7f2b36\")>\n\n    def test_SDF_jsonval(driver):\n        wait = WebDriverWait(driver, 20)  # Increased timeout\n        logging.info(\"Page title: %s\", driver.title)\n        logging.info(\"Page URL: %s\", driver.current_url)\n    \n        try:\n            # Click on Test Configuration\n            logging.info(\"Clicking on Test Configuration\")\n            test_config = wait.until(EC.visibility_of_element_located((By.XPATH, \"//span[contains(text(),'Test Configuration')]\")))\n>           test_config.click()\n\ntest_UC1.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D889B75590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF72DCEC2E9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE957BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"leftnavbar-title\">...</span> is not clickable at point (74, 247). Other element would receive the click: <div class=\"modal-backdrop\"></div>\nE         (Session info: chrome=134.0.6998.90)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF72DD8FE65+26629]\nE       \t(No symbol) [0x00007FF72DCF6030]\nE       \t(No symbol) [0x00007FF72DB8931A]\nE       \t(No symbol) [0x00007FF72DBE77A9]\nE       \t(No symbol) [0x00007FF72DBE5162]\nE       \t(No symbol) [0x00007FF72DBE2201]\nE       \t(No symbol) [0x00007FF72DBE1108]\nE       \t(No symbol) [0x00007FF72DBD28A4]\nE       \t(No symbol) [0x00007FF72DC07AAA]\nE       \t(No symbol) [0x00007FF72DBD2156]\nE       \t(No symbol) [0x00007FF72DC07CC0]\nE       \t(No symbol) [0x00007FF72DC30169]\nE       \t(No symbol) [0x00007FF72DC07883]\nE       \t(No symbol) [0x00007FF72DBD0550]\nE       \t(No symbol) [0x00007FF72DBD1803]\nE       \tGetHandleVerifier [0x00007FF72E0E72DD+3529853]\nE       \tGetHandleVerifier [0x00007FF72E0FDA42+3621858]\nE       \tGetHandleVerifier [0x00007FF72E0F24F3+3575443]\nE       \tGetHandleVerifier [0x00007FF72DE5B79A+860474]\nE       \t(No symbol) [0x00007FF72DD008AF]\nE       \t(No symbol) [0x00007FF72DCFCBE4]\nE       \t(No symbol) [0x00007FF72DCFCD86]\nE       \t(No symbol) [0x00007FF72DCEC2E9]\nE       \tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFEE957BF6C+44]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7252cb15d97d899414388db19c7f2b36\")>\n\n    def test_SDF_jsonval(driver):\n        wait = WebDriverWait(driver, 20)  # Increased timeout\n        logging.info(\"Page title: %s\", driver.title)\n        logging.info(\"Page URL: %s\", driver.current_url)\n    \n        try:\n            # Click on Test Configuration\n            logging.info(\"Clicking on Test Configuration\")\n            test_config = wait.until(EC.visibility_of_element_located((By.XPATH, \"//span[contains(text(),'Test Configuration')]\")))\n            test_config.click()\n    \n            logging.info(\"Clicking on body of the UI to enable interactions\")\n            driver.find_element(By.TAG_NAME, \"body\").click()\n    \n            # Click Edit SDF\n            logging.info(\"Clicking on Edit SDF Button\")\n            driver.find_element(By.XPATH, \"//i[@class='fa fa-edit me-1 cursorPointer mt-1']\").click()\n    \n            # Enter details\n            logging.info(\"Entering Applicant Name\")\n            driver.find_element(By.XPATH, \"//div[@class='modal-body']//input[@id='ApplicantName']\").send_keys(\"ApplicantName\")\n    \n            logging.info(\"Entering Product Name\")\n            driver.find_element(By.XPATH, \"//div[@class='modal-body']//input[@id='ProductName']\").send_keys(\"ProductName\")\n    \n            logging.info(\"Clicking WPID Support Checkbox\")\n            driver.find_element(By.XPATH, \"//div[@class='modal-body']//input[@id='WPIDSupport-editEsdf']\").click()\n            time.sleep(2)\n    \n            logging.info(\"Clicking Update Button\")\n            driver.find_element(By.XPATH, \"//button[@class='grl-button' and text()='Update']\").click()\n            time.sleep(5)\n    \n            logging.info(\"Clicking Export Button\")\n            driver.find_element(By.XPATH, \"//i[@class='fa fa-external-link cursorPointer mt-1']\").click()\n            time.sleep(5)\n    \n            # Verify file download\n            download_path = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\n            timeout = 20\n            new_filename = f\"SDF_Export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json\"\n            logging.info(\"Waiting for JSON file to download\")\n            start_time = time.time()\n            downloaded_file = None\n    \n            while time.time() - start_time < timeout:\n                files = os.listdir(download_path)\n                json_files = [f for f in files if f.endswith(\".json\")]\n                if json_files:\n                    json_files = sorted(json_files, key=lambda f: os.path.getmtime(os.path.join(download_path, f)), reverse=True)\n                    downloaded_file = json_files[0]\n                    break\n                time.sleep(0.5)\n    \n            if downloaded_file:\n                old_file_path = os.path.join(download_path, downloaded_file)\n                new_file_path = os.path.join(download_path, new_filename)\n                try:\n                    os.rename(old_file_path, new_file_path)\n                    logging.info(f\"Downloaded file renamed to: {new_filename}\")\n                except PermissionError:\n                    logging.warning(\"File is still being written. Retrying...\")\n                    time.sleep(2)\n                    os.rename(old_file_path, new_file_path)\n            else:\n                logging.error(\"No JSON file was downloaded.\")\n                assert False, \"JSON file download failed.\"\n    \n            # Navigating back\n            driver.find_element(By.XPATH, \"//span[@class='project-name-label cursorPointer']\").click()\n            time.sleep(5)\n            driver.find_element(By.XPATH, \"//input[@class='project-name-input panelcontrol textbox me-1']\").send_keys(\"sample\")\n            time.sleep(2)\n    \n            # **Uploading the JSON File**\n            logging.info(\"Uploading downloaded JSON file\")\n            print(new_file_path)\n            logging.info(new_file_path)\n    \n            # Try different upload methods\n            # upload_xpath = \"(//div[@class='drag-drop-div-parent'])[3]\"\n            #file = r\"C:\\Users\\GRL\\Downloads\\SDF_Export_20250321_143028.json\"\n    \n            try:\n                # 1️⃣ **First Attempt** → Find the input file element\n                upload_input = driver.find_element(By.XPATH, \"//div[@class='drag-drop-div']//input[@type='file' and @accept='.json']\")\n                upload_input.send_keys(new_file_path)  # Upload file\n                logging.info(f\"File uploaded: {new_file_path}\")\n    \n            except Exception:\n                # 2️⃣ **Alternative** → Use JavaScript if the file input is hidden\n                logging.warning(\"File input might be hidden. Trying JavaScript method.\")\n                driver.execute_script(\n                    \"arguments[0].style.display='block';\", driver.find_element(By.XPATH, \"//div[@class='drag-drop-div']//input[@type='file' and @accept='.json']\")\n                )\n                driver.find_element(By.XPATH, \"//div[@class='drag-drop-div']//input[@type='file' and @accept='.json']\").send_keys(new_file_path)\n                logging.info(f\"File uploaded using JavaScript: {new_file_path}\")\n    \n            time.sleep(5)\n    \n            # ✅ **Trigger UI updates by clicking elsewhere**\n    \n    \n            # ✅ **Ensure 'Create Project' button is enabled before clicking**\n            logging.info(\"Waiting for 'Create Project' button to be clickable\")\n            create_project_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[text()='Create Project']\")))\n            create_project_btn.click()\n            logging.info(\"Clicked on 'Create Project' successfully\")\n            time.sleep(5)\n    \n            # # ✅ **Ensure 'Create Project' button is enabled before clicking**\n            # logging.info(\"Waiting for 'Create Project' button to be clickable\")\n            # create_project_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//p[text()='Drag & drop file here']\")))\n            # create_project_btn.click()\n            # logging.info(\"Clicked on 'Create Project' successfully\")\n            # time.sleep(5)\n    \n    \n            # Validate uploaded data\n            logging.info(\"Validating Product Name after upload\")\n            wait.until(EC.text_to_be_present_in_element_value((By.XPATH, \"//input[@id='ProductName']\"), \"ProductName\"))\n    \n            uploaded_product_name = driver.find_element(By.XPATH, \"//input[@id='ProductName']\").get_attribute(\"value\")\n            assert uploaded_product_name == \"ProductName\", f\"Mismatch: Expected 'ProductName', but got '{uploaded_product_name}'\"\n    \n            logging.info(\"✅ Product Name validation successful after upload.\")\n    \n        except Exception as e:\n            logging.error(f\"❌ Error during test execution: {e}\")\n            driver.save_screenshot(\"failure_screenshot.png\")  # Capture screenshot for debugging\n>           pytest.fail(f\"Test failed due to error: {e}\")\nE           Failed: Test failed due to error: Message: element click intercepted: Element <span class=\"leftnavbar-title\">...</span> is not clickable at point (74, 247). Other element would receive the click: <div class=\"modal-backdrop\"></div>\nE             (Session info: chrome=134.0.6998.90)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF72DD8FE65+26629]\nE           \t(No symbol) [0x00007FF72DCF6030]\nE           \t(No symbol) [0x00007FF72DB8931A]\nE           \t(No symbol) [0x00007FF72DBE77A9]\nE           \t(No symbol) [0x00007FF72DBE5162]\nE           \t(No symbol) [0x00007FF72DBE2201]\nE           \t(No symbol) [0x00007FF72DBE1108]\nE           \t(No symbol) [0x00007FF72DBD28A4]\nE           \t(No symbol) [0x00007FF72DC07AAA]\nE           \t(No symbol) [0x00007FF72DBD2156]\nE           \t(No symbol) [0x00007FF72DC07CC0]\nE           \t(No symbol) [0x00007FF72DC30169]\nE           \t(No symbol) [0x00007FF72DC07883]\nE           \t(No symbol) [0x00007FF72DBD0550]\nE           \t(No symbol) [0x00007FF72DBD1803]\nE           \tGetHandleVerifier [0x00007FF72E0E72DD+3529853]\nE           \tGetHandleVerifier [0x00007FF72E0FDA42+3621858]\nE           \tGetHandleVerifier [0x00007FF72E0F24F3+3575443]\nE           \tGetHandleVerifier [0x00007FF72DE5B79A+860474]\nE           \t(No symbol) [0x00007FF72DD008AF]\nE           \t(No symbol) [0x00007FF72DCFCBE4]\nE           \t(No symbol) [0x00007FF72DCFCD86]\nE           \t(No symbol) [0x00007FF72DCEC2E9]\nE           \tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\nE           \tRtlUserThreadStart [0x00007FFEE957BF6C+44]\n\ntest_UC1.py:232: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1742550785739,"stop":1742550788287,"duration":2548},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"Failed: Test failed due to error: Message: element click intercepted: Element <span class=\"leftnavbar-title\">...</span> is not clickable at point (74, 247). Other element would receive the click: <div class=\"modal-backdrop\"></div>\n  (Session info: chrome=134.0.6998.90)\nStacktrace:\n\tGetHandleVerifier [0x00007FF72DD8FE65+26629]\n\t(No symbol) [0x00007FF72DCF6030]\n\t(No symbol) [0x00007FF72DB8931A]\n\t(No symbol) [0x00007FF72DBE77A9]\n\t(No symbol) [0x00007FF72DBE5162]\n\t(No symbol) [0x00007FF72DBE2201]\n\t(No symbol) [0x00007FF72DBE1108]\n\t(No symbol) [0x00007FF72DBD28A4]\n\t(No symbol) [0x00007FF72DC07AAA]\n\t(No symbol) [0x00007FF72DBD2156]\n\t(No symbol) [0x00007FF72DC07CC0]\n\t(No symbol) [0x00007FF72DC30169]\n\t(No symbol) [0x00007FF72DC07883]\n\t(No symbol) [0x00007FF72DBD0550]\n\t(No symbol) [0x00007FF72DBD1803]\n\tGetHandleVerifier [0x00007FF72E0E72DD+3529853]\n\tGetHandleVerifier [0x00007FF72E0FDA42+3621858]\n\tGetHandleVerifier [0x00007FF72E0F24F3+3575443]\n\tGetHandleVerifier [0x00007FF72DE5B79A+860474]\n\t(No symbol) [0x00007FF72DD008AF]\n\t(No symbol) [0x00007FF72DCFCBE4]\n\t(No symbol) [0x00007FF72DCFCD86]\n\t(No symbol) [0x00007FF72DCEC2E9]\n\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\n\tRtlUserThreadStart [0x00007FFEE957BF6C+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7252cb15d97d899414388db19c7f2b36\")>\n\n    def test_SDF_jsonval(driver):\n        wait = WebDriverWait(driver, 20)  # Increased timeout\n        logging.info(\"Page title: %s\", driver.title)\n        logging.info(\"Page URL: %s\", driver.current_url)\n    \n        try:\n            # Click on Test Configuration\n            logging.info(\"Clicking on Test Configuration\")\n            test_config = wait.until(EC.visibility_of_element_located((By.XPATH, \"//span[contains(text(),'Test Configuration')]\")))\n>           test_config.click()\n\ntest_UC1.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D889B75590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF72DCEC2E9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE957BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"leftnavbar-title\">...</span> is not clickable at point (74, 247). Other element would receive the click: <div class=\"modal-backdrop\"></div>\nE         (Session info: chrome=134.0.6998.90)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF72DD8FE65+26629]\nE       \t(No symbol) [0x00007FF72DCF6030]\nE       \t(No symbol) [0x00007FF72DB8931A]\nE       \t(No symbol) [0x00007FF72DBE77A9]\nE       \t(No symbol) [0x00007FF72DBE5162]\nE       \t(No symbol) [0x00007FF72DBE2201]\nE       \t(No symbol) [0x00007FF72DBE1108]\nE       \t(No symbol) [0x00007FF72DBD28A4]\nE       \t(No symbol) [0x00007FF72DC07AAA]\nE       \t(No symbol) [0x00007FF72DBD2156]\nE       \t(No symbol) [0x00007FF72DC07CC0]\nE       \t(No symbol) [0x00007FF72DC30169]\nE       \t(No symbol) [0x00007FF72DC07883]\nE       \t(No symbol) [0x00007FF72DBD0550]\nE       \t(No symbol) [0x00007FF72DBD1803]\nE       \tGetHandleVerifier [0x00007FF72E0E72DD+3529853]\nE       \tGetHandleVerifier [0x00007FF72E0FDA42+3621858]\nE       \tGetHandleVerifier [0x00007FF72E0F24F3+3575443]\nE       \tGetHandleVerifier [0x00007FF72DE5B79A+860474]\nE       \t(No symbol) [0x00007FF72DD008AF]\nE       \t(No symbol) [0x00007FF72DCFCBE4]\nE       \t(No symbol) [0x00007FF72DCFCD86]\nE       \t(No symbol) [0x00007FF72DCEC2E9]\nE       \tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFEE957BF6C+44]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7252cb15d97d899414388db19c7f2b36\")>\n\n    def test_SDF_jsonval(driver):\n        wait = WebDriverWait(driver, 20)  # Increased timeout\n        logging.info(\"Page title: %s\", driver.title)\n        logging.info(\"Page URL: %s\", driver.current_url)\n    \n        try:\n            # Click on Test Configuration\n            logging.info(\"Clicking on Test Configuration\")\n            test_config = wait.until(EC.visibility_of_element_located((By.XPATH, \"//span[contains(text(),'Test Configuration')]\")))\n            test_config.click()\n    \n            logging.info(\"Clicking on body of the UI to enable interactions\")\n            driver.find_element(By.TAG_NAME, \"body\").click()\n    \n            # Click Edit SDF\n            logging.info(\"Clicking on Edit SDF Button\")\n            driver.find_element(By.XPATH, \"//i[@class='fa fa-edit me-1 cursorPointer mt-1']\").click()\n    \n            # Enter details\n            logging.info(\"Entering Applicant Name\")\n            driver.find_element(By.XPATH, \"//div[@class='modal-body']//input[@id='ApplicantName']\").send_keys(\"ApplicantName\")\n    \n            logging.info(\"Entering Product Name\")\n            driver.find_element(By.XPATH, \"//div[@class='modal-body']//input[@id='ProductName']\").send_keys(\"ProductName\")\n    \n            logging.info(\"Clicking WPID Support Checkbox\")\n            driver.find_element(By.XPATH, \"//div[@class='modal-body']//input[@id='WPIDSupport-editEsdf']\").click()\n            time.sleep(2)\n    \n            logging.info(\"Clicking Update Button\")\n            driver.find_element(By.XPATH, \"//button[@class='grl-button' and text()='Update']\").click()\n            time.sleep(5)\n    \n            logging.info(\"Clicking Export Button\")\n            driver.find_element(By.XPATH, \"//i[@class='fa fa-external-link cursorPointer mt-1']\").click()\n            time.sleep(5)\n    \n            # Verify file download\n            download_path = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\n            timeout = 20\n            new_filename = f\"SDF_Export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json\"\n            logging.info(\"Waiting for JSON file to download\")\n            start_time = time.time()\n            downloaded_file = None\n    \n            while time.time() - start_time < timeout:\n                files = os.listdir(download_path)\n                json_files = [f for f in files if f.endswith(\".json\")]\n                if json_files:\n                    json_files = sorted(json_files, key=lambda f: os.path.getmtime(os.path.join(download_path, f)), reverse=True)\n                    downloaded_file = json_files[0]\n                    break\n                time.sleep(0.5)\n    \n            if downloaded_file:\n                old_file_path = os.path.join(download_path, downloaded_file)\n                new_file_path = os.path.join(download_path, new_filename)\n                try:\n                    os.rename(old_file_path, new_file_path)\n                    logging.info(f\"Downloaded file renamed to: {new_filename}\")\n                except PermissionError:\n                    logging.warning(\"File is still being written. Retrying...\")\n                    time.sleep(2)\n                    os.rename(old_file_path, new_file_path)\n            else:\n                logging.error(\"No JSON file was downloaded.\")\n                assert False, \"JSON file download failed.\"\n    \n            # Navigating back\n            driver.find_element(By.XPATH, \"//span[@class='project-name-label cursorPointer']\").click()\n            time.sleep(5)\n            driver.find_element(By.XPATH, \"//input[@class='project-name-input panelcontrol textbox me-1']\").send_keys(\"sample\")\n            time.sleep(2)\n    \n            # **Uploading the JSON File**\n            logging.info(\"Uploading downloaded JSON file\")\n            print(new_file_path)\n            logging.info(new_file_path)\n    \n            # Try different upload methods\n            # upload_xpath = \"(//div[@class='drag-drop-div-parent'])[3]\"\n            #file = r\"C:\\Users\\GRL\\Downloads\\SDF_Export_20250321_143028.json\"\n    \n            try:\n                # 1️⃣ **First Attempt** → Find the input file element\n                upload_input = driver.find_element(By.XPATH, \"//div[@class='drag-drop-div']//input[@type='file' and @accept='.json']\")\n                upload_input.send_keys(new_file_path)  # Upload file\n                logging.info(f\"File uploaded: {new_file_path}\")\n    \n            except Exception:\n                # 2️⃣ **Alternative** → Use JavaScript if the file input is hidden\n                logging.warning(\"File input might be hidden. Trying JavaScript method.\")\n                driver.execute_script(\n                    \"arguments[0].style.display='block';\", driver.find_element(By.XPATH, \"//div[@class='drag-drop-div']//input[@type='file' and @accept='.json']\")\n                )\n                driver.find_element(By.XPATH, \"//div[@class='drag-drop-div']//input[@type='file' and @accept='.json']\").send_keys(new_file_path)\n                logging.info(f\"File uploaded using JavaScript: {new_file_path}\")\n    \n            time.sleep(5)\n    \n            # ✅ **Trigger UI updates by clicking elsewhere**\n    \n    \n            # ✅ **Ensure 'Create Project' button is enabled before clicking**\n            logging.info(\"Waiting for 'Create Project' button to be clickable\")\n            create_project_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[text()='Create Project']\")))\n            create_project_btn.click()\n            logging.info(\"Clicked on 'Create Project' successfully\")\n            time.sleep(5)\n    \n            # # ✅ **Ensure 'Create Project' button is enabled before clicking**\n            # logging.info(\"Waiting for 'Create Project' button to be clickable\")\n            # create_project_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//p[text()='Drag & drop file here']\")))\n            # create_project_btn.click()\n            # logging.info(\"Clicked on 'Create Project' successfully\")\n            # time.sleep(5)\n    \n    \n            # Validate uploaded data\n            logging.info(\"Validating Product Name after upload\")\n            wait.until(EC.text_to_be_present_in_element_value((By.XPATH, \"//input[@id='ProductName']\"), \"ProductName\"))\n    \n            uploaded_product_name = driver.find_element(By.XPATH, \"//input[@id='ProductName']\").get_attribute(\"value\")\n            assert uploaded_product_name == \"ProductName\", f\"Mismatch: Expected 'ProductName', but got '{uploaded_product_name}'\"\n    \n            logging.info(\"✅ Product Name validation successful after upload.\")\n    \n        except Exception as e:\n            logging.error(f\"❌ Error during test execution: {e}\")\n            driver.save_screenshot(\"failure_screenshot.png\")  # Capture screenshot for debugging\n>           pytest.fail(f\"Test failed due to error: {e}\")\nE           Failed: Test failed due to error: Message: element click intercepted: Element <span class=\"leftnavbar-title\">...</span> is not clickable at point (74, 247). Other element would receive the click: <div class=\"modal-backdrop\"></div>\nE             (Session info: chrome=134.0.6998.90)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF72DD8FE65+26629]\nE           \t(No symbol) [0x00007FF72DCF6030]\nE           \t(No symbol) [0x00007FF72DB8931A]\nE           \t(No symbol) [0x00007FF72DBE77A9]\nE           \t(No symbol) [0x00007FF72DBE5162]\nE           \t(No symbol) [0x00007FF72DBE2201]\nE           \t(No symbol) [0x00007FF72DBE1108]\nE           \t(No symbol) [0x00007FF72DBD28A4]\nE           \t(No symbol) [0x00007FF72DC07AAA]\nE           \t(No symbol) [0x00007FF72DBD2156]\nE           \t(No symbol) [0x00007FF72DC07CC0]\nE           \t(No symbol) [0x00007FF72DC30169]\nE           \t(No symbol) [0x00007FF72DC07883]\nE           \t(No symbol) [0x00007FF72DBD0550]\nE           \t(No symbol) [0x00007FF72DBD1803]\nE           \tGetHandleVerifier [0x00007FF72E0E72DD+3529853]\nE           \tGetHandleVerifier [0x00007FF72E0FDA42+3621858]\nE           \tGetHandleVerifier [0x00007FF72E0F24F3+3575443]\nE           \tGetHandleVerifier [0x00007FF72DE5B79A+860474]\nE           \t(No symbol) [0x00007FF72DD008AF]\nE           \t(No symbol) [0x00007FF72DCFCBE4]\nE           \t(No symbol) [0x00007FF72DCFCD86]\nE           \t(No symbol) [0x00007FF72DCEC2E9]\nE           \tBaseThreadInitThunk [0x00007FFEE8F2E8D7+23]\nE           \tRtlUserThreadStart [0x00007FFEE957BF6C+44]\n\ntest_UC1.py:232: Failed","steps":[],"attachments":[{"uid":"ac4a0d88d6a72450","name":"log","source":"ac4a0d88d6a72450.txt","type":"text/plain","size":1498}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"driver::0","time":{"start":1742550805850,"stop":1742550808463,"duration":2613},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_UC1"},{"name":"host","value":"DESKTOP-GHENSD5"},{"name":"thread","value":"36496-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_UC1"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"4db3d12c389eea03.json","parameterValues":[]}