{"name": "test_connect_to_tester", "status": "failed", "statusDetails": {"message": "Failed: Test failed due to error: Tester did not connect successfully!\nassert 'Connected' in 'IP address \"192.168.5.63\" unreachable'", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7148e94f4a331ee75f1da9e4a7842633\")>\n\n    @pytest.mark.sanity\n    def test_connect_to_tester(driver):\n        BA_URL = \"http://localhost:2004\"\n        TESTER_IP = \"192.168.5.63\"\n    \n        logging.info(\"Opening BA URL: %s\", BA_URL)\n        driver.get(BA_URL)\n    \n        wait = WebDriverWait(driver, 10)\n    \n        try:\n            # Clear existing IP address if the clear button exists\n            try:\n                ip_clear = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='rc-select-selection__clear']\")))\n                logging.info(\"Clearing existing IP Address field\")\n                ip_clear.click()\n            except TimeoutException:\n                logging.warning(\"Clear button not found. Skipping clearing IP field.\")\n    \n            # Enter new IP address\n            logging.info(\"Entering new IP Address: %s\", TESTER_IP)\n            ip_input = wait.until(EC.presence_of_element_located((By.XPATH, \"//input[@class='rc-select-search__field']\")))\n            ip_input.send_keys(TESTER_IP)\n            ip_input.send_keys(Keys.RETURN)\n            time.sleep(5)\n    \n            # Click the Connect button\n            logging.info(\"Clicking the Connect button\")\n            connect_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@id='connectionsetup_connect_button']\")))\n            connect_button.click()\n            time.sleep(5)\n    \n            # Verify tester connection status\n            logging.info(\"Verifying tester connection status\")\n            status_element = wait.until(EC.presence_of_element_located((By.XPATH, \"//td[contains(@class, 'tester-info-border')]/div[@class='right-spacing-tester']/b\")))\n            tester_status = status_element.text.strip()\n            logging.info(\"Tester connection status: %s\", tester_status)\n>           assert \"Connected\" in tester_status, \"Tester did not connect successfully!\"\nE           AssertionError: Tester did not connect successfully!\nE           assert 'Connected' in 'IP address \"192.168.5.63\" unreachable'\n\ntest_UC1.py:64: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7148e94f4a331ee75f1da9e4a7842633\")>\n\n    @pytest.mark.sanity\n    def test_connect_to_tester(driver):\n        BA_URL = \"http://localhost:2004\"\n        TESTER_IP = \"192.168.5.63\"\n    \n        logging.info(\"Opening BA URL: %s\", BA_URL)\n        driver.get(BA_URL)\n    \n        wait = WebDriverWait(driver, 10)\n    \n        try:\n            # Clear existing IP address if the clear button exists\n            try:\n                ip_clear = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='rc-select-selection__clear']\")))\n                logging.info(\"Clearing existing IP Address field\")\n                ip_clear.click()\n            except TimeoutException:\n                logging.warning(\"Clear button not found. Skipping clearing IP field.\")\n    \n            # Enter new IP address\n            logging.info(\"Entering new IP Address: %s\", TESTER_IP)\n            ip_input = wait.until(EC.presence_of_element_located((By.XPATH, \"//input[@class='rc-select-search__field']\")))\n            ip_input.send_keys(TESTER_IP)\n            ip_input.send_keys(Keys.RETURN)\n            time.sleep(5)\n    \n            # Click the Connect button\n            logging.info(\"Clicking the Connect button\")\n            connect_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@id='connectionsetup_connect_button']\")))\n            connect_button.click()\n            time.sleep(5)\n    \n            # Verify tester connection status\n            logging.info(\"Verifying tester connection status\")\n            status_element = wait.until(EC.presence_of_element_located((By.XPATH, \"//td[contains(@class, 'tester-info-border')]/div[@class='right-spacing-tester']/b\")))\n            tester_status = status_element.text.strip()\n            logging.info(\"Tester connection status: %s\", tester_status)\n            assert \"Connected\" in tester_status, \"Tester did not connect successfully!\"\n    \n        except Exception as e:\n            logging.error(f\"Error during connection setup: {e}\")\n            driver.save_screenshot(\"failure_screenshot.png\")  # Capture screenshot for debugging\n>           pytest.fail(f\"Test failed due to error: {e}\")\nE           Failed: Test failed due to error: Tester did not connect successfully!\nE           assert 'Connected' in 'IP address \"192.168.5.63\" unreachable'\n\ntest_UC1.py:69: Failed"}, "attachments": [{"name": "log", "source": "da087210-00a2-4c8d-882f-ea3db549c289-attachment.txt", "type": "text/plain"}], "start": 1742729247198, "stop": 1742729264443, "uuid": "974b3df4-6009-4167-8268-9ee9d62aedd8", "historyId": "aaa9b7b476ee8d67704f8e72a130a31d", "testCaseId": "aaa9b7b476ee8d67704f8e72a130a31d", "fullName": "tests.test_UC1#test_connect_to_tester", "labels": [{"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_UC1"}, {"name": "host", "value": "DESKTOP-GHENSD5"}, {"name": "thread", "value": "35416-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_UC1"}]}